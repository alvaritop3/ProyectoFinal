# Query: localStorage
# Including: ./FrontEnd/src/app
# ContextLines: 1

23 resultados - Archivos de 14

FrontEnd/src/app/helpers/auth.interceptor.ts:
  18    ): Observable<HttpEvent<unknown>> {
  19:     //Recuperamos el token del sesionStorage y en el caso de que haya, lo incluimos en la cabecera
  20      const token = this.loginService.getToken();

  28  
  29:     //En caso de que no exista JWT en sesionStorage, mandará la solicitud tal cual
  30      return next.handle(request);

FrontEnd/src/app/private/admin/admin-sidebar/admin-sidebar.component.ts:
  24    logout(): void {
  25:     sesionStorage.clear();
  26      this.datosUsuario.id = 0;

FrontEnd/src/app/private/monitor/monitor-sidebar/monitor-sidebar.component.ts:
  22    logout(): void {
  23:     sesionStorage.clear();
  24      this.datosUsuario.id = 0;

FrontEnd/src/app/private/tutor/mostrar-alumnos/mostrar-alumnos.component.ts:
  28  
  29:     //Me aseguro de que tengo el id con el sesionStorage
  30:     if (sesionStorage.getItem('id')) {
  31:       this.id_tutor = sesionStorage.getItem('id');
  32      }

FrontEnd/src/app/private/tutor/mostrar-cursos/mostrar-cursos.component.ts:
  34  
  35:     //Lo guardo en sesionStorage
  36:     sesionStorage.setItem('id_alumno', this.id_alumno);
  37    }

FrontEnd/src/app/private/tutor/tutor-sidebar/tutor-sidebar.component.ts:
  27    logout(): void {
  28:     sesionStorage.clear();
  29      this.datosUsuario.id = 0;

FrontEnd/src/app/public/login/login.component.ts:
  88            this.datosUsuario.telefono = datos.telefono;
  89:           //Almaceno el id en el sesionStorage
  90:           sesionStorage.setItem('id', datos.id);
  91  

FrontEnd/src/app/services/auth-admin.service.ts:
  10    isAuthenticated$(): boolean {
  11:     let token = sesionStorage.getItem('token');
  12      let decodeToken = this.jwtDecode.DecodeToken(String(token));

FrontEnd/src/app/services/auth-monitor.service.ts:
  10    isAuthenticated$(): boolean {
  11:     let token = sesionStorage.getItem('token');
  12      let decodeToken = this.jwtDecode.DecodeToken(String(token));

FrontEnd/src/app/services/auth-tutor.service.ts:
  10    isAuthenticated$(): boolean {
  11:     let token = sesionStorage.getItem('token');
  12      let decodeToken = this.jwtDecode.DecodeToken(String(token));

FrontEnd/src/app/services/datos-alumno.service.ts:
  12    constructor() {
  13:     this.id = Number(sesionStorage.getItem('id_alumno'));
  14    }

FrontEnd/src/app/services/datos-usuario.service.ts:
  13    constructor() {
  14:     this.id = Number(sesionStorage.getItem('id'));
  15:     this.email = String(sesionStorage.getItem('email'));
  16    }

FrontEnd/src/app/services/login.service.ts:
  28  
  29:           sesionStorage.setItem('token', token);
  30  

  34  
  35:           sesionStorage.setItem('email', tokenDecoded.username);
  36  

  42    getToken() {
  43:     return sesionStorage.getItem('token');
  44    }
  45  
  46:   //Para obtener la información del usuario y almacenarla en el sesionStorage
  47    getDatosByEmail(email: string): any {

FrontEnd/src/app/shared/footer/footer.component.ts:
  18    logout(): void {
  19:     sesionStorage.clear();
  20      this.datosUsuario.id = 0;
